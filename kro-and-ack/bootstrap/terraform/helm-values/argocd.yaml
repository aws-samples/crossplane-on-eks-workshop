dex:
  enabled: false # Disable dex since we are not using

redis-ha:
  enabled: true

controller:
  replicas: 1 # Additional replicas will cause sharding of managed clusters across number of replicas.
  metrics:
    enabled: true
    service:
      annotations:
        prometheus.io/scrape: true
  env:
    - name: ARGOCD_K8S_CLIENT_QPS #required for Crossplane too many CRDs https://github.com/argoproj/argo-cd/pull/448
      value: "300"

repoServer:
  autoscaling:
    enabled: true
    minReplicas: 1
  resources: # Adjust based on your specific use case (required for HPA)
    requests:
      cpu: "100m"
      memory: "256Mi"
    limits:
      cpu: "200m"
      memory: "512Mi"
  metrics:
    enabled: true
    service:
      annotations:
        prometheus.io/scrape: true

applicationSet:
  replicaCount: 1 # The controller doesn't scale horizontally, is active-standby replicas
  metrics:
    enabled: true
    service:
      annotations:
        prometheus.io/scrape: true

server:
  autoscaling:
    enabled: true
    minReplicas: 1
  resources: # Adjust based on your specific use case (required for HPA)
    requests:
      cpu: "100m"
      memory: "256Mi"
    limits:
      cpu: "200m"
      memory: "512Mi"
  metrics:
    enabled: true
    service:
      annotations:
        prometheus.io/scrape: true
  service:
    type: "LoadBalancer"
    annotations:
      service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"

configs:
  # General Argo CD configuration
  ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cm.yaml
  cm:
    resource.customizations: |
      services.k8s.aws/AdoptedResource:
        health.lua: |
          hs = {}
          if obj.status ~= nil then
            if obj.status.conditions ~= nil then
              for i, condition in ipairs(obj.status.conditions) do
                if condition.type == "ACK.Adopted" and condition.status == "False" then
                  hs.status = "Degraded"
                  hs.message = condition.message
                  return hs
                end
                if condition.type == "ACK.Adopted" and condition.status == "True" then
                  hs.status = "Healthy"
                  hs.message = condition.message
                  return hs
                end
              end
            end
          end
          hs.status = "Progressing"
          hs.message = "Waiting for Status conditions"
          return hs
      "*.services.k8s.aws/*":
        health.lua.useOpenLibs: true
        health.lua: |
          hs = {}
          if obj.status and obj.status.conditions then
              for i, condition in ipairs(obj.status.conditions) do
                  if condition.status == "Unknown" then
                      hs.status = "Degraded"
                      hs.message = condition.reason
                      return hs
                  elseif condition.type == "ACK.Recoverable" and condition.status == "True" then
                      hs.status = "Degraded"
                      hs.message = condition.message
                      return hs
                  elseif condition.type == "ACK.Terminal" and condition.status == "True" then
                      hs.status = "Degraded"
                      hs.message = condition.message
                      return hs
                  elseif condition.type == "ACK.ResourceSynced" then
                      if condition.status == "True" then
                          hs.status = "Healthy"
                          hs.message = condition.message
                          return hs
                      elseif condition.status == "False" then
                          hs.status = "Progressing"
                          hs.message = condition.reason
                          return hs
                      end
                  end
              end
          end
          hs.status = "Progressing"
          hs.message = "Waiting for Status conditions"
          return hs